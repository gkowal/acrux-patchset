diff -uNr linux-4.10.4-acrux/drivers/pci/quirks.c linux-4.10.4-acrux-p1/drivers/pci/quirks.c
--- linux-4.10.4-acrux/drivers/pci/quirks.c	2017-03-18 08:19:00.000000000 -0300
+++ linux-4.10.4-acrux-p1/drivers/pci/quirks.c	2017-03-18 23:01:21.581877826 -0300
@@ -2788,6 +2788,26 @@
 DECLARE_PCI_FIXUP_HEADER(PCI_VENDOR_ID_HINT, 0x0020, quirk_hotplug_bridge);
 
 /*
+ * Apple: Avoid programming the memory/io aperture of 00:1c.0
+ *
+ * BIOS does not declare any resource for 00:1c.0, but with
+ * hotplug flag set, thus the OS allocates:
+ * [mem 0x7fa00000 - 0x7fbfffff]
+ * [mem 0x7fc00000-0x7fdfffff 64bit pref]
+ * which is conflict with an unreported device, which
+ * causes unpredictable result such as accessing io port.
+ * So clear the hotplug flag to work around it.
+ */
+static void quirk_apple_mbp_poweroff(struct pci_dev *dev)
+{
+   if (dmi_match(DMI_PRODUCT_NAME, "MacBookPro11,4") ||
+       dmi_match(DMI_PRODUCT_NAME, "MacBookPro11,5"))
+       dev->is_hotplug_bridge = 0;
+}
+
+DECLARE_PCI_FIXUP_HEADER(PCI_VENDOR_ID_INTEL, 0x8c10, quirk_apple_mbp_poweroff);
+
+/*
  * This is a quirk for the Ricoh MMC controller found as a part of
  * some mulifunction chips.
 
diff -uNr linux-4.10.4-acrux/fs/namei.c linux-4.10.4-acrux-p1/fs/namei.c
--- linux-4.10.4-acrux/fs/namei.c	2017-03-18 08:19:00.000000000 -0300
+++ linux-4.10.4-acrux-p1/fs/namei.c	2017-03-18 23:01:21.579877779 -0300
@@ -888,8 +888,8 @@
 		path_put(&last->link);
 }
 
-int sysctl_protected_symlinks __read_mostly = 0;
-int sysctl_protected_hardlinks __read_mostly = 0;
+int sysctl_protected_symlinks __read_mostly = 1;
+int sysctl_protected_hardlinks __read_mostly = 1;
 
 /**
  * may_follow_link - Check symlink following for unsafe situations
diff -uNr linux-4.10.4-acrux/include/uapi/linux/xattr.h linux-4.10.4-acrux-p1/include/uapi/linux/xattr.h
--- linux-4.10.4-acrux/include/uapi/linux/xattr.h	2017-03-18 08:19:00.000000000 -0300
+++ linux-4.10.4-acrux-p1/include/uapi/linux/xattr.h	2017-03-18 23:01:21.576877710 -0300
@@ -73,5 +73,9 @@
 #define XATTR_POSIX_ACL_DEFAULT  "posix_acl_default"
 #define XATTR_NAME_POSIX_ACL_DEFAULT XATTR_SYSTEM_PREFIX XATTR_POSIX_ACL_DEFAULT
 
+/* User namespace */
+#define XATTR_PAX_PREFIX XATTR_USER_PREFIX "pax."
+#define XATTR_PAX_FLAGS_SUFFIX "flags"
+#define XATTR_NAME_PAX_FLAGS XATTR_PAX_PREFIX XATTR_PAX_FLAGS_SUFFIX
 
 #endif /* _UAPI_LINUX_XATTR_H */
diff -uNr linux-4.10.4-acrux/init/do_mounts.c linux-4.10.4-acrux-p1/init/do_mounts.c
--- linux-4.10.4-acrux/init/do_mounts.c	2017-03-18 08:19:00.000000000 -0300
+++ linux-4.10.4-acrux-p1/init/do_mounts.c	2017-03-18 23:01:21.582877849 -0300
@@ -490,7 +490,11 @@
 	va_start(args, fmt);
 	vsprintf(buf, fmt, args);
 	va_end(args);
-	fd = sys_open("/dev/root", O_RDWR | O_NDELAY, 0);
+	if (saved_root_name[0])
+		fd = sys_open(saved_root_name, O_RDWR | O_NDELAY, 0);
+	else
+		fd = sys_open("/dev/root", O_RDWR | O_NDELAY, 0);
+
 	if (fd >= 0) {
 		sys_ioctl(fd, FDEJECT, 0);
 		sys_close(fd);
@@ -534,11 +538,17 @@
 #endif
 #ifdef CONFIG_BLOCK
 	{
-		int err = create_dev("/dev/root", ROOT_DEV);
-
-		if (err < 0)
-			pr_emerg("Failed to create /dev/root: %d\n", err);
-		mount_block_root("/dev/root", root_mountflags);
+		if (saved_root_name[0] == '/') {
+	       	int err = create_dev(saved_root_name, ROOT_DEV);
+			if (err < 0)
+				pr_emerg("Failed to create %s: %d\n", saved_root_name, err);
+			mount_block_root(saved_root_name, root_mountflags);
+		} else {
+			int err = create_dev("/dev/root", ROOT_DEV);
+			if (err < 0)
+				pr_emerg("Failed to create /dev/root: %d\n", err);
+			mount_block_root("/dev/root", root_mountflags);
+		}
 	}
 #endif
 }
diff -uNr linux-4.10.4-acrux/mm/shmem.c linux-4.10.4-acrux-p1/mm/shmem.c
--- linux-4.10.4-acrux/mm/shmem.c	2017-03-18 08:19:00.000000000 -0300
+++ linux-4.10.4-acrux-p1/mm/shmem.c	2017-03-18 23:01:21.577877733 -0300
@@ -3186,6 +3186,14 @@
 	struct shmem_inode_info *info = SHMEM_I(inode);
 
 	name = xattr_full_name(handler, name);
+
+	if (!strncmp(name, XATTR_USER_PREFIX, XATTR_USER_PREFIX_LEN)) {
+		if (strcmp(name, XATTR_NAME_PAX_FLAGS))
+			return -EOPNOTSUPP;
+		if (size > 8)
+			return -EINVAL;
+	}
+
 	return simple_xattr_set(&info->xattrs, name, value, size, flags);
 }
 
@@ -3201,6 +3209,12 @@
 	.set = shmem_xattr_handler_set,
 };
 
+static const struct xattr_handler shmem_user_xattr_handler = {
+	.prefix = XATTR_USER_PREFIX,
+	.get = shmem_xattr_handler_get,
+	.set = shmem_xattr_handler_set,
+};
+
 static const struct xattr_handler *shmem_xattr_handlers[] = {
 #ifdef CONFIG_TMPFS_POSIX_ACL
 	&posix_acl_access_xattr_handler,
@@ -3208,6 +3222,7 @@
 #endif
 	&shmem_security_xattr_handler,
 	&shmem_trusted_xattr_handler,
+	&shmem_user_xattr_handler,
 	NULL
 };
 

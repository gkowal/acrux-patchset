diff '--color=auto' -uNr linux-6.13.1/arch/arm64/kernel/vdso32/Makefile linux-6.13.1-p1/arch/arm64/kernel/vdso32/Makefile
--- linux-6.13.1/arch/arm64/kernel/vdso32/Makefile	2025-02-01 13:21:26.000000000 -0300
+++ linux-6.13.1-p1/arch/arm64/kernel/vdso32/Makefile	2025-02-01 18:58:12.311306897 -0300
@@ -65,7 +65,7 @@
                -fno-strict-aliasing -fno-common \
                -Werror-implicit-function-declaration \
                -Wno-format-security \
-               -std=gnu11
+               $(CSTD_FLAG)
 VDSO_CFLAGS  += -O2
 # Some useful compiler-dependent flags from top-level Makefile
 VDSO_CFLAGS += $(call cc32-option,-Wno-pointer-sign)
diff '--color=auto' -uNr linux-6.13.1/arch/sparc/mm/init_64.c linux-6.13.1-p1/arch/sparc/mm/init_64.c
--- linux-6.13.1/arch/sparc/mm/init_64.c	2025-02-01 13:21:26.000000000 -0300
+++ linux-6.13.1-p1/arch/sparc/mm/init_64.c	2025-02-01 18:58:12.305306924 -0300
@@ -3073,11 +3073,11 @@
 static void __init kernel_lds_init(void)
 {
 	code_resource.start = compute_kern_paddr(_text);
-	code_resource.end   = compute_kern_paddr(_etext - 1);
+	code_resource.end   = compute_kern_paddr(_etext) - 1;
 	data_resource.start = compute_kern_paddr(_etext);
-	data_resource.end   = compute_kern_paddr(_edata - 1);
+	data_resource.end   = compute_kern_paddr(_edata) - 1;
 	bss_resource.start  = compute_kern_paddr(__bss_start);
-	bss_resource.end    = compute_kern_paddr(_end - 1);
+	bss_resource.end    = compute_kern_paddr(_end) - 1;
 }
 
 static int __init report_memory(void)
diff '--color=auto' -uNr linux-6.13.1/arch/x86/boot/compressed/Makefile linux-6.13.1-p1/arch/x86/boot/compressed/Makefile
--- linux-6.13.1/arch/x86/boot/compressed/Makefile	2025-02-01 13:21:26.000000000 -0300
+++ linux-6.13.1-p1/arch/x86/boot/compressed/Makefile	2025-02-01 18:58:12.311306897 -0300
@@ -24,7 +24,7 @@
 # case of cross compiling, as it has the '--target=' flag, which is needed to
 # avoid errors with '-march=i386', and future flags may depend on the target to
 # be valid.
-KBUILD_CFLAGS := -m$(BITS) -O2 $(CLANG_FLAGS)
+KBUILD_CFLAGS := -m$(BITS) -O2 $(CLANG_FLAGS) $(CSTD_FLAG)
 KBUILD_CFLAGS += -fno-strict-aliasing -fPIE
 KBUILD_CFLAGS += -Wundef
 KBUILD_CFLAGS += -DDISABLE_BRANCH_PROFILING
diff '--color=auto' -uNr linux-6.13.1/arch/x86/Makefile linux-6.13.1-p1/arch/x86/Makefile
--- linux-6.13.1/arch/x86/Makefile	2025-02-01 13:21:26.000000000 -0300
+++ linux-6.13.1-p1/arch/x86/Makefile	2025-02-01 18:58:12.311306897 -0300
@@ -47,7 +47,7 @@
 
 # How to compile the 16-bit code.  Note we always compile for -march=i386;
 # that way we can complain to the user if the CPU is insufficient.
-REALMODE_CFLAGS	:= -std=gnu11 -m16 -g -Os -DDISABLE_BRANCH_PROFILING -D__DISABLE_EXPORTS \
+REALMODE_CFLAGS	:= $(CSTD_FLAG) -m16 -g -Os -DDISABLE_BRANCH_PROFILING -D__DISABLE_EXPORTS \
 		   -Wall -Wstrict-prototypes -march=i386 -mregparm=3 \
 		   -fno-strict-aliasing -fomit-frame-pointer -fno-pic \
 		   -mno-mmx -mno-sse $(call cc-option,-fcf-protection=none)
diff '--color=auto' -uNr linux-6.13.1/drivers/base/firmware_loader/main.c linux-6.13.1-p1/drivers/base/firmware_loader/main.c
--- linux-6.13.1/drivers/base/firmware_loader/main.c	2025-02-01 13:21:26.000000000 -0300
+++ linux-6.13.1-p1/drivers/base/firmware_loader/main.c	2025-02-01 18:58:12.313306888 -0300
@@ -898,6 +898,11 @@
 
 	ret = _request_firmware_prepare(&fw, name, device, buf, size,
 					offset, opt_flags);
+
+#ifdef CONFIG_GENTOO_PRINT_FIRMWARE_INFO
+        printk(KERN_NOTICE "Loading firmware: %s\n", name);
+#endif
+
 	if (ret <= 0) /* error or already assigned */
 		goto out;
 
diff '--color=auto' -uNr linux-6.13.1/drivers/firmware/efi/libstub/Makefile linux-6.13.1-p1/drivers/firmware/efi/libstub/Makefile
--- linux-6.13.1/drivers/firmware/efi/libstub/Makefile	2025-02-01 13:21:26.000000000 -0300
+++ linux-6.13.1-p1/drivers/firmware/efi/libstub/Makefile	2025-02-01 18:58:12.311306897 -0300
@@ -7,7 +7,7 @@
 #
 
 # non-x86 reuses KBUILD_CFLAGS, x86 does not
-cflags-y			:= $(KBUILD_CFLAGS)
+cflags-y			:= $(KBUILD_CFLAGS) $(CSTD_FLAG)
 
 cflags-$(CONFIG_X86_32)		:= -march=i386
 cflags-$(CONFIG_X86_64)		:= -mcmodel=small
@@ -18,7 +18,7 @@
 				   $(call cc-disable-warning, address-of-packed-member) \
 				   $(call cc-disable-warning, gnu) \
 				   -fno-asynchronous-unwind-tables \
-				   $(CLANG_FLAGS)
+				   $(CLANG_FLAGS) $(CSTD_FLAG)
 
 # arm64 uses the full KBUILD_CFLAGS so it's necessary to explicitly
 # disable the stackleak plugin
@@ -42,7 +42,7 @@
 				   -ffreestanding \
 				   -fno-stack-protector \
 				   $(call cc-option,-fno-addrsig) \
-				   -D__DISABLE_EXPORTS
+				   -D__DISABLE_EXPORTS $(CSTD_FLAG)
 
 #
 # struct randomization only makes sense for Linux internal types, which the EFI
diff '--color=auto' -uNr linux-6.13.1/fs/namei.c linux-6.13.1-p1/fs/namei.c
--- linux-6.13.1/fs/namei.c	2025-02-01 13:21:26.000000000 -0300
+++ linux-6.13.1-p1/fs/namei.c	2025-02-01 18:58:12.304306929 -0300
@@ -1093,10 +1093,10 @@
 		path_put(&last->link);
 }
 
-static int sysctl_protected_symlinks __read_mostly;
-static int sysctl_protected_hardlinks __read_mostly;
-static int sysctl_protected_fifos __read_mostly;
-static int sysctl_protected_regular __read_mostly;
+static int sysctl_protected_symlinks __read_mostly = 1;
+static int sysctl_protected_hardlinks __read_mostly = 1;
+int sysctl_protected_fifos __read_mostly = 1;
+int sysctl_protected_regular __read_mostly = 1;
 
 #ifdef CONFIG_SYSCTL
 static struct ctl_table namei_sysctls[] = {
diff '--color=auto' -uNr linux-6.13.1/kernel/sys.c linux-6.13.1-p1/kernel/sys.c
--- linux-6.13.1/kernel/sys.c	2025-02-01 13:21:26.000000000 -0300
+++ linux-6.13.1-p1/kernel/sys.c	2025-02-01 18:58:12.306306920 -0300
@@ -2742,10 +2742,16 @@
 		break;
 #endif
 	case PR_SET_MDWE:
-		error = prctl_set_mdwe(arg2, arg3, arg4, arg5);
+		if (IS_ENABLED(CONFIG_PARISC))
+			error = -EINVAL;
+		else
+			error = prctl_set_mdwe(arg2, arg3, arg4, arg5);
 		break;
 	case PR_GET_MDWE:
-		error = prctl_get_mdwe(arg2, arg3, arg4, arg5);
+		if (IS_ENABLED(CONFIG_PARISC))
+			error = -EINVAL;
+		else
+			error = prctl_get_mdwe(arg2, arg3, arg4, arg5);
 		break;
 	case PR_PPC_GET_DEXCR:
 		if (arg3 || arg4 || arg5)
diff '--color=auto' -uNr linux-6.13.1/kernel/trace/bpf_trace.c linux-6.13.1-p1/kernel/trace/bpf_trace.c
--- linux-6.13.1/kernel/trace/bpf_trace.c	2025-02-01 13:21:26.000000000 -0300
+++ linux-6.13.1-p1/kernel/trace/bpf_trace.c	2025-02-01 18:58:12.309306906 -0300
@@ -1049,7 +1049,7 @@
 };
 
 #ifdef CONFIG_X86_KERNEL_IBT
-static unsigned long get_entry_ip(unsigned long fentry_ip)
+static unsigned long __maybe_unused get_entry_ip(unsigned long fentry_ip)
 {
 	u32 instr;
 
diff '--color=auto' -uNr linux-6.13.1/Makefile linux-6.13.1-p1/Makefile
--- linux-6.13.1/Makefile	2025-02-01 13:21:26.000000000 -0300
+++ linux-6.13.1-p1/Makefile	2025-02-01 18:58:12.311306897 -0300
@@ -441,6 +441,8 @@
 # SHELL used by kbuild
 CONFIG_SHELL := sh
 
+CSTD_FLAG := -std=gnu11
+
 HOST_LFS_CFLAGS := $(shell getconf LFS_CFLAGS 2>/dev/null)
 HOST_LFS_LDFLAGS := $(shell getconf LFS_LDFLAGS 2>/dev/null)
 HOST_LFS_LIBS := $(shell getconf LFS_LIBS 2>/dev/null)
@@ -462,7 +464,7 @@
 HOSTPKG_CONFIG	= pkg-config
 
 KBUILD_USERHOSTCFLAGS := -Wall -Wmissing-prototypes -Wstrict-prototypes \
-			 -O2 -fomit-frame-pointer -std=gnu11
+			 -O2 -fomit-frame-pointer $(CSTD_FLAG)
 KBUILD_USERCFLAGS  := $(KBUILD_USERHOSTCFLAGS) $(USERCFLAGS)
 KBUILD_USERLDFLAGS := $(USERLDFLAGS)
 
@@ -575,7 +577,7 @@
 KBUILD_AFLAGS   := -D__ASSEMBLY__ -fno-PIE
 
 KBUILD_CFLAGS :=
-KBUILD_CFLAGS += -std=gnu11
+KBUILD_CFLAGS += $(CSTD_FLAG)
 KBUILD_CFLAGS += -fshort-wchar
 KBUILD_CFLAGS += -funsigned-char
 KBUILD_CFLAGS += -fno-common
@@ -622,7 +624,7 @@
 export PERL PYTHON3 CHECK CHECKFLAGS MAKE UTS_MACHINE HOSTCXX
 export KGZIP KBZIP2 KLZOP LZMA LZ4 XZ ZSTD
 export KBUILD_HOSTCXXFLAGS KBUILD_HOSTLDFLAGS KBUILD_HOSTLDLIBS LDFLAGS_MODULE
-export KBUILD_USERCFLAGS KBUILD_USERLDFLAGS
+export KBUILD_USERCFLAGS KBUILD_USERLDFLAGS CSTD_FLAG
 
 export KBUILD_CPPFLAGS NOSTDINC_FLAGS LINUXINCLUDE OBJCOPYFLAGS KBUILD_LDFLAGS
 export KBUILD_CFLAGS CFLAGS_KERNEL CFLAGS_MODULE
diff '--color=auto' -uNr linux-6.13.1/net/bluetooth/hci_conn.c linux-6.13.1-p1/net/bluetooth/hci_conn.c
--- linux-6.13.1/net/bluetooth/hci_conn.c	2025-02-01 13:21:26.000000000 -0300
+++ linux-6.13.1-p1/net/bluetooth/hci_conn.c	2025-02-01 18:58:12.308306911 -0300
@@ -2475,8 +2475,13 @@
 		return 0;
 	}
 
-	if (hci_conn_ssp_enabled(conn) &&
-	    !test_bit(HCI_CONN_ENCRYPT, &conn->flags))
+	/* If Secure Simple Pairing is not enabled, then legacy connection
+	 * setup is used and no encryption or key sizes can be enforced.
+	 */
+	if (!hci_conn_ssp_enabled(conn))
+		return 1;
+
+	if (!test_bit(HCI_CONN_ENCRYPT, &conn->flags))
 		return 0;
 
 	return 1;
diff '--color=auto' -uNr linux-6.13.1/scripts/sign-file.c linux-6.13.1-p1/scripts/sign-file.c
--- linux-6.13.1/scripts/sign-file.c	2025-02-01 13:21:26.000000000 -0300
+++ linux-6.13.1-p1/scripts/sign-file.c	2025-02-01 18:58:12.310306902 -0300
@@ -51,9 +51,10 @@
  * signing with anything other than SHA1 - so we're stuck with that if such is
  * the case.
  */
-#if defined(LIBRESSL_VERSION_NUMBER) || \
-	OPENSSL_VERSION_NUMBER < 0x10000000L || \
-	defined(OPENSSL_NO_CMS)
+#if defined(OPENSSL_NO_CMS) || \
+	( defined(LIBRESSL_VERSION_NUMBER) \
+	&& (LIBRESSL_VERSION_NUMBER < 0x3010000fL) ) || \
+	OPENSSL_VERSION_NUMBER < 0x10000000L
 #define USE_PKCS7
 #endif
 #ifndef USE_PKCS7
diff '--color=auto' -uNr linux-6.13.1/tools/lib/bpf/elf.c linux-6.13.1-p1/tools/lib/bpf/elf.c
--- linux-6.13.1/tools/lib/bpf/elf.c	2025-02-01 13:21:26.000000000 -0300
+++ linux-6.13.1-p1/tools/lib/bpf/elf.c	2025-02-01 18:58:12.312306892 -0300
@@ -370,6 +370,11 @@
 	return ret;
 }
 
+#if !defined(__clang__)
+#pragma GCC diagnostic push
+/* https://gcc.gnu.org/PR114952 */
+#pragma GCC diagnostic ignored "-Wmaybe-uninitialized"
+#endif
 /* Find offset of function name in ELF object specified by path. "name" matches
  * symbol name or name@@LIB for library functions.
  */
@@ -385,6 +390,9 @@
 	elf_close(&elf_fd);
 	return ret;
 }
+#if !defined(__clang__)
+#pragma GCC diagnostic pop
+#endif
 
 struct symbol {
 	const char *name;
